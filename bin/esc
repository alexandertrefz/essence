#!/usr/bin/env bun

import { readFile } from "fs/promises"
import path from "path"

import chalk from "chalk"

import yargs from "yargs/yargs"
import { hideBin } from "yargs/helpers"

import { parse } from "../src/parser"
import { enrich } from "../src/enricher"
import { validate } from "../src/validator"
import { simplify } from "../src/simplifier"
import { optimise } from "../src/optimiser"
import { rewrite } from "../src/rewriter"

let argv = await yargs(hideBin(process.argv))
	.usage("Usage: $0 <fileName>")
	.option("outputFileName", {
		alias: "-o",
		type: "string",
		description:
			"The name of the output file. If not provided, defaults to the name of the input file.",
		requiresArg: true,
	})
	.option("debug", {
		alias: "-d",
		type: "boolean",
		description: "Outputs various debugging information.",
	})
	.parse()

function generateOutputFilePath(inputFileName, outputFileName) {
	if (outputFileName === undefined) {
		outputFileName = `${path.basename(
			argv._[0].toString(),
			path.extname(argv._[0].toString()),
		)}.js`
	}

	return path.join(path.dirname(inputFileName), outputFileName)
}

async function compile(flags) {
	const start = performance.now()

	try {
		const data = await readFile(flags.inputFileName, "utf8")

		const initialProgram = parse(data)

		const enrichedProgram = enrich(initialProgram)

		const validatedProgram = validate(enrichedProgram)

		const simplifiedProgram = simplify(validatedProgram)

		const optimisedProgram = optimise(simplifiedProgram)

		await rewrite(optimisedProgram, flags)

		const end = performance.now()

		console.log(
			`Successfully compiled ${chalk.cyan(
				flags.inputFileName,
			)} -> ${chalk.green(flags.outputFileName)} in ${chalk.magenta(
				Math.round(end - start) + "ms",
			)}`,
		)
	} catch (error) {
		return Promise.reject(error)
	}

	return Promise.resolve(flags)
}

compile({
	inputFileName: argv._[0].toString(),
	debug: argv.debug ?? false,
	outputFileName: generateOutputFilePath(
		argv._[0].toString(),
		argv.outputFileName,
	),
}).then(
	() => {},
	(error) => {
		console.error(error)
	},
)

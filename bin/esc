#!/usr/bin/env node

const fs = require("fs");
const util = require("util");
const path = require("path");

const yargs = require("yargs/yargs");
const { hideBin } = require("yargs/helpers");

const readFile = util.promisify(fs.readFile);

const Parser = require("../lib/parser");
const Enricher = require("../lib/enricher");
const Validator = require("../lib/validator");
const Simplifier = require("../lib/simplifier");
const Optimiser = require("../lib/optimiser");
const Rewriter = require("../lib/rewriter");

function generateOutputFilePath(inputFileName, outputFileName) {
	if (outputFileName === undefined) {
		outputFileName = `${path.basename(argv._[0], path.extname(argv._[0]))}.js`;
	}

	return path.join(path.dirname(inputFileName), outputFileName);
}

async function compile(flags) {
	const data = await readFile(flags.inputFileName, "utf8");

	try {
		const initialProgram = Parser.parse(data);
		const enrichedProgram = Enricher.enrich(initialProgram);
		const validatedProgram = Validator.validate(enrichedProgram);
		const simplifiedProgram = Simplifier.simplify(validatedProgram);
		const optimisedProgram = Optimiser.optimise(simplifiedProgram);
		await Rewriter.rewrite(optimisedProgram, flags);
	} catch (error) {
		return Promise.reject(error);
	}

	return Promise.resolve(flags);
}

let argv = yargs(hideBin(process.argv))
	.usage("Usage: $0 <fileName>")
	.option("outputFileName", {
		alias: "-o",
		type: "string",
		description:
			"The name of the output file. If not provided, defaults to the name of the input file.",
	})
	.option("debug", {
		alias: "-d",
		type: "boolean",
		description: "Outputs various debugging information.",
	})
	.parse();

compile({
	inputFileName: argv._[0],
	debug: argv.debug ?? false,
	outputFileName: generateOutputFilePath(argv._[0], argv.outputFileName),
}).then(
	(flags) => {
		console.log(
			`Successfully compiled ${flags.inputFileName} -> ${flags.outputFileName}`,
		);
	},
	(reason) => {
		console.log(reason);
	},
);

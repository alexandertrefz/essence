#!/usr/bin/env node

const fs = require("fs")
const util = require("util")
const path = require("path")

const meow = require("meow")

const readFile = util.promisify(fs.readFile)
const writeFile = util.promisify(fs.writeFile)

const Parser = require("../lib/parser")
const Enricher = require("../lib/enricher")
const Validator = require("../lib/validator")
const Simplifier = require("../lib/simplifier")
const Optimiser = require("../lib/optimiser")
const Rewriter = require("../lib/rewriter")

function constructTargetFileName(inputFileName) {
	const sourceFileNameParsed = path.parse(inputFileName)
	return sourceFileNameParsed.dir + "/" + sourceFileNameParsed.name + ".js"
}

async function compile(inputFileName, flags) {
	const targetFileName = constructTargetFileName(inputFileName)

	const data = await readFile(inputFileName, "utf8")

	try {
		const initialProgram = Parser.parse(data)
		const enrichedProgram = Enricher.enrich(initialProgram)
		const validatedProgram = Validator.validate(enrichedProgram)
		const simplifiedProgram = Simplifier.simplify(validatedProgram)
		const optimisedProgram = Optimiser.optimise(simplifiedProgram)
		const rewrittenProgram = await Rewriter.rewrite(optimisedProgram, flags.mode)

		await writeFile(targetFileName, rewrittenProgram)
	} catch (error) {
		return Promise.reject(error)
	}

	return Promise.resolve(inputFileName)
}

const cli = meow(
	{
		help: `
			Usage
				$ esc <fileName>

			Options
				--mode Set the rewriter mode
				--debug Outputs various debugging information

			Examples
				$ esc HelloWorld.es --mode js
		`,
		description: false,
	},
	{
		flags: {
			mode: {
				type: "string",
				default: "js",
			},
			debug: {
				type: "boolean",
				default: false,
			},
		},
	},
)

compile(cli.input[0], Object.assign({ mode: "js", debug: false }, cli.flags)).then(
	inputFileName => {
		console.log(`Successfully compiled ${inputFileName} -> ${constructTargetFileName(inputFileName)}`)
	},
	reason => {
		console.log(reason)
	},
)
